스프링 IoC컨테이너란?
스프링 애플리케이션에서는 오브젝트의 생성과 관계설정, 사용, 제거 등의 작업을 애플리케이션 코드 대신 독립된 컨테이너에서 담당한다.
이를 컨테이너가 코드 대신 오프젝트에 대한 제어권을 가지고 있다고 해서 IoC라고 부른다.
그래서 스프링 컨테이너를 IoC 컨테이너라고 부른다.

1.1.2 IoC 컨테이너의 종류와 사용 방법

StaticApplicationContext
=> 코드를 통해 빈 메타정보를 등록하기 위해 사용
=> 스프링 IoC컨테이너는 파일 포맷이나 리소스 종류에 독립적이며 오브젝트로 표현되는 순수한
  메타정보를 사용한다는 것을 보여주기 위해 사용해봄.

GenericApplicationContext
가장 일반적인 애플리케이션 컨텍스트의 구현 클래스.
실전에서 사용될 수 있는 모든 기능을 갖추고 있는 애플리케잇녀 컨텍스트.
=> xml설정 파일 load시 XmlBeanDefinitionReader 혹은 GenericXmlApplicationContext를 사용한다.

WebApplicationContext
ApplicationContext를 확장한 인터페이스.

1.1.3 IoC 컨테이너 계층구조

부모 컨텍스트를 이용한 계층구조 효과
자신이 관리하는 빈 중에서 필요한 빈을 찾고, 없으면 부모 컨텍스트에게 빈을 찾아달라고 요청.
검색순서는 항상 자신이 먼저고, 그 다음 직계 부모다.
=> childContext 랑 parentContext참고

1.1.4 웹 애플리케이션 IoC 컨테이너 구성
서버에서 동작하는 애플리케이션에서 스프링 IoC컨테이너를 사용하는 방법은 크게 세가지
 => 2개는 웹 모듈 안에 컨테이너를 두는 방법 (1)
 => 1개는 엔터프라이즈 애프리케이션 레벨에 두는 방법 (2)

자바 서버는 하나 이상의 우베 모듈을 배치해서 사용할 수 있다.

방법 (1)
  1.1 스프링 애플리케이션의 요청을 처리하는 서블릿 안에서 만들어지는 것.
  1.2. 웹 애플리케이션 레벨에서 만들어 지는 것


xml 설정보다 자바 코드에 의한 설정이 좋은 이유
  1. 컴파일러나 IDE를 통한 타입 검증 가능
  2. 자동완성과 같은 IDE 지원 기능을 최대한 이용할 수 있다.
  3. 이해하기 쉽다.
  4. 복잡한 빈 설정이나 초기화 작업을 손쉽게 적용할 수 있다.



1.3.2 스코프

스코프의 종류
1. 요청, 세션, 클로벌세션, 애플리케이션

요청 스코프 빈
하나의 웹 요청 안에서 만들어지고 해당 요청이 끝날 때 제거된다.
주요 용도 : 애프리케이션 코드에서 생성한 정보를 프레임워크 레벨의 서비스나 인터셉터 등에 전달하는것.

세션스코프, 클로벌세션 스코프
HTTP 세션과 같은 존재 범위를 갖는 빈으로 만들어주는 스코프.

애플리케이션 스코프
애플리케이션 스코프는 서블릿 컨텍스트에 저장되는 빈 오프젝트.







