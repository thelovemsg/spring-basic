상속의 용도
  1. 타입 계층을 구현하는 것
    ㄴ 타입 계층 안에서 부모 클래스는 일반적인 개념을 구현하고 자식 클래스는 특수한 개념을 구현한다.
  2. 코드 재사용
    ㄴ 상속은 간단한 선언만으로 부모 클래스의 코드를 재사용할 수 있는 마법의 주문과도 같다.
    ㄴ 상속을 사용하면 점진적으로 애플리케이션의 기능을 확장할 수 있다.
    => 하지만 재사용을 위해 상속을 사용할 경우, 부모 클래스의 자식 클래스가 강하게 결합되기 때문에
       변경이 어려운 코드를 얻게 될 확률이 높다.

  상속을 사용하는 일차적인 목표는 타입 계층을 구현하는 것이어야 한다.

  이번 장에서는 올바른 타입 계층을 구성하는 원칙을 살펴보고자 한다.

01. 타입
  개념관점의 타입
    ㄴ 개념관점에서 타입이란 우리가 인지하는 세상의 사물의 종류를 의미.

    타입은 심볼, 내연, 외연으로 구성된다.

    심볼 : 타입에 이름을 붙인 것.
    내연 : 타입의 정의로서 타입에 속하는 객체들이 가지는 공통적인 속성이나 행동을 가리킨다.
    외연 : 타입에 속하는 객체들의 집합.

  프로그래밍 언어 관점의 타입
    ㄴ 프로그래밍 언어 관점에서 타입은 연속적인 비트에 의미와 제약을 부여하기 위해 사용된다.

    1. 타입에 수행될 수 있는 유효한 오퍼레이션의 집합을 정의한다.
      ㄴ
    2. 타입에 수행되는 오퍼레이션에 대해 미리 약속된 문맥을 제공한다.

  객체지향 패러다임 관점의 타입
    ㄴ 개념 관점에서 타입이란 공통의 특징을 공유하는 대상들의 분류다.
    ㄴ 프로그래밍 언어 관점에서 타입이란 동일한 오퍼레이션을 적용할 수 있는 인스턴스들의 집합이다.

    => 프로그래밍 언어의 관점에서 타입은 호출 가능한 오퍼레이션의 집합을 정의.
       객체지향 프로그래밍에서 오퍼레이션은 객체가 수신할 수 있는 메시지를 의미.
       따라서 객체의 타입이란 객체가 수신할 수 있는 메시지의 종류를 정의하는 것.

  슈퍼 타입의 특징
    ㄴ 집합이 다른 집합의 모든 멤버를 포함.
    ㄴ 타입 정의가 다른 타입보다 좀 더 일반적.

  서브 타입의 특징
    ㄴ 집합에 포함되는 인스턴스들이 더 큰 집합에 포함
    ㄴ 타입 정의가 다른 타입보다 좀 더 구체적.

  객체지향 프로그래밍 관점에서 타입 정의가 더 일반적이고 특수하다는 사실이 어떤 의미를 가지는지 보자면...

  퍼블릭 인터페이스가 객체의 타입을 결정.

  일반적인 타입 : 비교하려는 타입에 속한 객체들의 퍼블릭 인터페이스보다 더 일반적인 퍼블릭 인터페이스를 가지는 객체들의 타입을 의미.
  특수한 타입   : 비교하려는 타입에 속한 객체들의 퍼블릭 인터페이스보다 더 특수한 퍼블릭 인터페이스를 가지는 객체들의 타입.


03 서브 클래싱과 서브 타이핑

  언제 상속을 해야 하는가?
     1. 상속 관계가 is-a 관계를 모델링하는가?
     2. 클라이언트 입장에서 부모 클래스의 타입으로 자식 클래스를 사용해도 무방한가?

  서브클래싱
  ㄴ 다른 클래스의 코드를 재사용할 목적으로 상속을 사용하는 경우를 가리킨다. 자식 클래스와 부모 클래스의 행동이 호환되지 않기 때문에
    자식 클래스의 인스턴스가 부모 클래스의 인스턴스를 대체할 수 없다. 서브클래싱을 구현 상속 또는 클래스 상속이라고 부르기도 한다.

  서브타이핑
  ㄴ 타입 계층을 구성하기 위해 상속을 사용하는 경우를 가리킨다. 영화 예매 시스템에서 구현한 DiscountPolicy 상속 계층이 서브타이핑에 해당한다.
    서브타이핑에서는 자식 클래스와 부모 클래스의 행동이 호환되기 때문에 자식 클래스의 인스턴스가 부모 클래스의 인스턴스를 대체할 수 있다.

  서브타이핑 관계가 유지되기 위해서는 서브타입이 슈퍼타입이 하는 모든 행동을 동일하게 할 수 있어야 한다.
  즉, 어떤 타입이 다른 타입의 서브타입이 되기 위해서는 행동 호환성을 만족시켜야 한다.

  자식클래스와 부모 클래스 사이의 행동 호환성은 부모 클래스에 대한 자식 클래스의 대체 가능성을 포함한다.

리스코프 치환 원칙
  => 서브타입은 그것의 기반 타입에 대해 대체 가능해야 한다.