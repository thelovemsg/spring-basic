상속이 부모 클래스와 자식 클래스를 연결해서 부모 클래스의 코드를 재사용하는데 비해 합성은
전체를 표현하는 객체가 부분을 표현하는 객체를 포함해서 부분 객체의 코드를 재사용한다.

상속 => is-a 관계
합성 => has-a 관계

상속 관계는 클래스 사이의 정적인 관계 => whitebox reuse
합성 관계는 객체 사이의 동적인 관계   => blackbox reuse
왜냐하면 코드 작성 시점에서 결정한 상속 관계는 변경이 불가능하지만
합성 관계는 실행 시점에 동적으로 변경할 수 있기 때문이다.

상속과 합성은 재사용의 대상이 다르다.

상속은 부모 클래스 안에 구현된 코드 자체를 재사용하지만 합성은 객체의 퍼블릭 인터페이스를 재사용한다.

forwarding ??
ㄴ 기존 클래스의 이넡페이스를 그대로 외부에 제공하면서 구현에 대한 결합없이 일부 작동 방식을 변경하고 싶은 경우에 사용
forwarding method
ㄴ 동일한 메서드를 호출하기위해 추가된 메서드

상속의 또 다른 문제점
    1. 하나의 기능을 추가하거나 수정히기 위해 불필요하게 많은 수의 크랠스를 추가하거나 수정해야 한다.
    2. 단일 상속만 지원하는 언어에서는 상속으로 인해 오히려 중복 코드의 양이 늘어날 수 있다.
      => 클래스가 너무 많이 생겨나는 현상을 클래스 폭발이라고 한다.


