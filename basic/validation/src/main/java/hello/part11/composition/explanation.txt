상속 관계는 컴파일타임에 결정되고 고정되기 때문에 코드를 실행하는 도중에는 변경할 수 없다.
따라서 여러 기능을 조합해야 하는 설계에 상속을 이용하면 모든 조합 가능한 경우별로 클래스를 추가해야 한다.

합성은 컴파일타임 관계를 런타임 관계로 변경함으로써 이 문제를 해결한다.
합성을 사용하면 구현이 아닌 퍼블릭 인터페이스에 대해서만 의존할 수 있기 때문에 런타임에 객체의 관계를 변경할 수 있다.

컴파일 타임 의존성과 런타임 의존성의 거리가 멀면 멀수록 설계의 복잡도가 상승하기 때문에 코드를 이해하기 어려워지는 것은 사실이다.
하지만 설계는 변경과 유지보수를 위해 존재한다는 사실을 기억하자.



--------------------------------------------------------------------

믹스인

상속을 사용하면 다른 클래스를 간편하게 재사용하고 점진적으로 확장할 수 있지만 부모 클래스와 자식 클래스가 강하게 결합되기 떄문에 수정과
확장에 취약한 설계를 낳는다. 우리가 원하는 것은 코드를 재사용하면서도 납득할만한 결합도를 유지하는 것이다.

합성이 상속과 같은 문제점을 초래하지 않는 이유는 클래스의 구체적인 구현이 아니라 객체의 추상적인 인터페이스에 의존하기 때문이다.

믹스인이란, 객체를 생성할 때 코드 일부를 클래스 안에 섞어 넣어 재사용하는 기법을 가리키는 용어다.
  상속 => 자식 클래스를 부모 클래스와 동일한 개념으로 범주를 묶어 is-a 관계를 만들기 위한 방법
  믹스인 => 코드를 다른 코드 안에 넣기 위한 방법


