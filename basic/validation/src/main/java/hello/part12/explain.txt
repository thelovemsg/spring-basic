다형성

자식을 이용해 자식 클래스를 추가하려 한다면?

1. 상속을 사용하려는 이유가 단순히 코드 재사용인가? => X
2. 클라이언트 관점에서 인스턴스들을 동일하게 행동하는 그룹으로 묶기 위해서인가?

                 - 매개변수 : 제레닉 프로그래밍과 관련이 높은데 클래스의 인스턴스 변수나 메서드의 매개변수 타입을
                             임의의 타입으로 선언한 후 사용하는 시점에 구체적인 타입으로 지정하는 방식
      - 유니버설   - 포함 : 메시지가 동일하더라도 수신한 객체의 타입에 따라 실제로 수행되는 행동이 달라지는 능력
                          서브타임 다형성이라고도 부른다.
                          전제조건은 자식 클래스가 부모 클래스의 서브타입어야 한다는 점.
                          => 상속이 클래스들을 계층으로 쌓아 올린 후 상황에 따라 적절한 메서드를 선택할 수 있는 메커니즘을 제공.

다형성
      - 임시      - 오버로딩 : 하나의 클래스 안에 동일한 이름의 메서드가 존재하는 경우
                 - 강제 : 언어가 지원하는 자동적인 타입 변환이나 사용자가 직접 구현한 타입 변환을 이용해 동일한
                         연산자를 다양한 타입에 사용할 수 있는 방식('+' 사용기 => 숫자랑 리터럴 생각)


02. 상속의 양면성
객체지향의 패러다임의 근간을 이루는 아이디어는 데이터와 행동을 객체라고 불리는 하나의 실행단위 안으로 통합하는것이다.


04. 동적 메서드 탐색과 다형성

 - 메시지를 수신한 객체는 먼저 자신을 생성한 클레스에 적합한 메서드가 존재하는지 검사. 존재하면 메서드를 실행하고 탐색을 종료
 - 메서드를 찾기 못했다면 부모 클래스에서 메서드 탐색을 계속한다. 이 과정은 적합한 메서드를 찾을 때까지 상속 계층을 따라 올라가며 계속된다.
 - 상속 계층의 가장 최상위 클래스에 이르렀지만 메서드를 발견하지 못한 경우 예외를 발생시켜 탐색을 중단한다.




